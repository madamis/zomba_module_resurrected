# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ZombaDialog
                                 A QGIS plugin
 zombaland management system
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-05-04
        git sha              : $Format:%H$
        copyright            : (C) 2019 by chanco
        email                : madamiss@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5 import uic
from PyQt5 import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
from PyQt5.QtWidgets import QMainWindow

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    #os.path.dirname(__file__), 'zomba_module_dialog_base.ui'))
    os.path.dirname(__file__), 'main_window.ui'))


class ZombaDialog(QMainWindow, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(ZombaDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

# class ZombaDialog(QtWidgets.QDialog, FORM_CLASS):
#     def __init__(self, parent=None):
#         """Constructor."""
#         super(ZombaDialog, self).__init__(parent)
#         # Set up the user interface from Designer through FORM_CLASS.
#         # After self.setupUi() you can access any designer object by doing
#         # self.<objectname>, and you can use autoconnect slots - see
#         # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
#         # #widgets-and-dialogs-with-auto-connect
#         self.setupUi(self)

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
CUSTOME_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'CustomeItem.ui'))


class CustomeUI(QtWidgets.QDialog, CUSTOME_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(CustomeUI, self).__init__(parent)
        # Set up the user interface from Designer through CUSTOME_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
LOGINPANEL_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'login.ui'))


class LoginPanel(QtWidgets.QWidget, LOGINPANEL_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(LoginPanel, self).__init__(parent)
        self.setupUi(self)

TABS_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'tabs.ui'))


class Tabs(QtWidgets.QWidget, TABS_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(Tabs, self).__init__(parent)
        self.setupUi(self)